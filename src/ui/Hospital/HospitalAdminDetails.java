/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital;

import ui.Hospital.BuyProductsFromColdStorage;
import model.EcoSystem;
import model.Employee.Employee;
import model.Enterprise.Enterprise;
import model.WorkQueue.Order;
import model.WorkQueue.Product;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 *
 * @author pawan
 */
public class HospitalAdminDetails extends javax.swing.JPanel {
    Enterprise enterprise;
    Order order;
    JPanel userProcessContainer;
    EcoSystem ecoSystem;
    /**
     * Creates new form CustomerDetails
     */
    public HospitalAdminDetails(JPanel userProcessContainer, Order order, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.enterprise = enterprise;
        this.order = order;
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        int total = 0;
        
        lblTotal.setText(String.valueOf(order.totalDistributor()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtCard = new javax.swing.JTextField();
        btnCompletePayment = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setLayout(null);

        jLabel1.setText("Name");
        add(jLabel1);
        jLabel1.setBounds(144, 160, 30, 14);

        jLabel2.setText("CardNumber");
        add(jLabel2);
        jLabel2.setBounds(101, 204, 69, 14);

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        add(txtName);
        txtName.setBounds(243, 155, 146, 18);
        add(txtCard);
        txtCard.setBounds(243, 199, 146, 18);

        btnCompletePayment.setText("Complete payment");
        btnCompletePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompletePaymentActionPerformed(evt);
            }
        });
        add(btnCompletePayment);
        btnCompletePayment.setBounds(235, 273, 134, 24);

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(17, 9, 76, 24);

        jLabel3.setText("Order Total:");
        add(jLabel3);
        jLabel3.setBounds(105, 103, 65, 14);

        lblTotal.setText("<Order Total>");
        add(lblTotal);
        lblTotal.setBounds(266, 103, 80, 14);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/payment.jpeg"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4);
        jLabel4.setBounds(0, 10, 1140, 630);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnCompletePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompletePaymentActionPerformed
        // TODO add your handling code here:
        if(order.getProductList().size()==0){
            JOptionPane.showMessageDialog(this, "Please add items to the cart");
            return;
        }
        if(txtCard.getText().isEmpty() || txtName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "All fields are mandatory");
            return;
        }
        if(checkCardValid(txtCard.getText())){
            Employee customer = new Employee(txtName.getText(), txtCard.getText());
            System.out.println(" uday " +order.getReceiverEnterprise());
            Order newOrder = new Order();
            newOrder.setNetworkName(order.getNetworkName());
            newOrder.setSender(order.getSender());
            newOrder.setSenderEnterprise(order.getSenderEnterprise());
            newOrder.setReceiverEnterprise(order.getReceiverEnterprise());
            newOrder.setStatus("waiting for distributor to accept");
            for(Product prod:order.getProductList()){
                newOrder.getProductList().add(prod);
            }
            System.out.println("priting order product list");
            System.out.println(order.getProductList());
            System.out.println("priting new order product list");
            System.out.println(newOrder.getProductList());
            ecoSystem.getWorkQueue().getWorkRequestList().add(newOrder);
            JOptionPane.showMessageDialog(this, "Thankyou for shopping with us");
            order.setStatus("waiting for distributor admin to accept");
            System.out.println("order placed");
            order.getProductList().clear();
            System.out.println("priting order product list");
            System.out.println(order.getProductList());
            System.out.println("priting new order product list");
            System.out.println(newOrder.getProductList());
            redirectBackAfterPayemnt();
        }else{
            JOptionPane.showMessageDialog(this, "Please enter valid card number");
        }
    }//GEN-LAST:event_btnCompletePaymentActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        redirectBackAfterPayemnt();
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCompletePayment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextField txtCard;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
    public boolean checkCardValid(String card){
        Pattern pattern = Pattern.compile("[0-9]{16}", Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(card);
        return matcher.find();
    }
    
    public void redirectBackAfterPayemnt(){
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        BuyProductsFromColdStorage dwjp = (BuyProductsFromColdStorage) component;
        dwjp.populateProductList();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }
}
