/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.neuuday.assignment1.ui;

import com.neuuday.assignment1.model.ContactInfo;
import com.neuuday.assignment1.model.Employee;
import com.neuuday.assignment1.model.EmployeeDirectory;
import static java.awt.image.ImageObserver.WIDTH;
import java.util.*;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.neuuday.assignment1.util.UtilClass;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author udaykk
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    private EmployeeDirectory directory;
    private static final Integer width = 195;
    private static final Integer height = 196;
    String fileName = null;
    byte[] employee_image = null;

    public ViewJPanel(EmployeeDirectory directory) {
        initComponents();
        this.directory = directory;
        populateTable();
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlejLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeDirectoryjTable = new javax.swing.JTable();
        viewjButton = new javax.swing.JButton();
        deletejButton = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtFldEmployeeId = new javax.swing.JTextField();
        lblPositionTitle = new javax.swing.JLabel();
        txtFldName = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtFldTeamInfo = new javax.swing.JTextField();
        txtFldAge = new javax.swing.JTextField();
        txtFldPositionTitle = new javax.swing.JTextField();
        lblPhoneNumber = new javax.swing.JLabel();
        txtFldPhoneNumber = new javax.swing.JTextField();
        txtFldEmail = new javax.swing.JTextField();
        txtFldStartDate = new javax.swing.JTextField();
        comboBoxGender = new javax.swing.JComboBox<>();
        lblAge = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblEmployeeId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        txtFldLevel = new javax.swing.JTextField();
        lblLevel = new javax.swing.JLabel();
        lblTeamInfo = new javax.swing.JLabel();
        titleSearch = new javax.swing.JLabel();
        comboBoxSearch = new javax.swing.JComboBox<>();
        txtFldSearch = new javax.swing.JTextField();
        btnSearchGo = new javax.swing.JButton();
        btnClearSearch = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnUpdateUploadPhoto = new javax.swing.JButton();
        btnCancelUpdate = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1250, 850));

        titlejLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        titlejLabel.setText("View Employee Records");

        employeeDirectoryjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Name", "Gender", "Level", "Age", "Position Title", "Phone Number", "Email Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeeDirectoryjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeDirectoryjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employeeDirectoryjTable);
        if (employeeDirectoryjTable.getColumnModel().getColumnCount() > 0) {
            employeeDirectoryjTable.getColumnModel().getColumn(0).setHeaderValue("Employee ID");
            employeeDirectoryjTable.getColumnModel().getColumn(1).setHeaderValue("Name");
            employeeDirectoryjTable.getColumnModel().getColumn(2).setHeaderValue("Gender");
            employeeDirectoryjTable.getColumnModel().getColumn(3).setHeaderValue("Level");
            employeeDirectoryjTable.getColumnModel().getColumn(4).setHeaderValue("Age");
            employeeDirectoryjTable.getColumnModel().getColumn(5).setHeaderValue("Position Title");
            employeeDirectoryjTable.getColumnModel().getColumn(6).setHeaderValue("Phone Number");
            employeeDirectoryjTable.getColumnModel().getColumn(7).setHeaderValue("Email Address");
        }

        viewjButton.setText("View");
        viewjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewjButtonActionPerformed(evt);
            }
        });

        deletejButton.setText("Delete");
        deletejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletejButtonActionPerformed(evt);
            }
        });

        btnUpdate.setText("Confirm Update");
        btnUpdate.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                btnUpdateComponentHidden(evt);
            }
        });
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtFldEmployeeId.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldEmployeeId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldEmployeeIdActionPerformed(evt);
            }
        });

        lblPositionTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblPositionTitle.setText("Position Title");

        txtFldName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldNameActionPerformed(evt);
            }
        });

        lblEmail.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblEmail.setText("Email");

        txtFldTeamInfo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldTeamInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldTeamInfoActionPerformed(evt);
            }
        });

        txtFldAge.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        txtFldPositionTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldPositionTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldPositionTitleActionPerformed(evt);
            }
        });

        lblPhoneNumber.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblPhoneNumber.setText("Phone Number");

        txtFldPhoneNumber.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        txtFldEmail.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldEmailActionPerformed(evt);
            }
        });

        txtFldStartDate.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldStartDateActionPerformed(evt);
            }
        });

        comboBoxGender.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        comboBoxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Gender", "Male", "Female", "Others" }));
        comboBoxGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxGenderActionPerformed(evt);
            }
        });

        lblAge.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblAge.setText("Age");

        lblGender.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblGender.setText("Gender");

        lblEmployeeId.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblEmployeeId.setText("Employee Id");

        lblName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblName.setText("Name");

        lblStartDate.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblStartDate.setText("Start Date");

        txtFldLevel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtFldLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLevelActionPerformed(evt);
            }
        });

        lblLevel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblLevel.setText("Level");

        lblTeamInfo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblTeamInfo.setText("Team Info");

        titleSearch.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        titleSearch.setText("Search Using");

        comboBoxSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Field", "Employee Id", "Name", "Age", "Gender", "Level", "Position Title", "Phone Number", "Email" }));
        comboBoxSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSearchActionPerformed(evt);
            }
        });

        btnSearchGo.setText("Go");
        btnSearchGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGoActionPerformed(evt);
            }
        });

        btnClearSearch.setText("Clear Search Results");
        btnClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSearchActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnUpdateUploadPhoto.setText("Browse");
        btnUpdateUploadPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUploadPhotoActionPerformed(evt);
            }
        });

        btnCancelUpdate.setText("Cancel");
        btnCancelUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(titleSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearchGo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClearSearch))
                            .addComponent(txtFldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(269, 269, 269)
                        .addComponent(btnEdit)
                        .addGap(12, 12, 12)
                        .addComponent(deletejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(titlejLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblName)
                                    .addComponent(lblLevel)
                                    .addComponent(lblTeamInfo)
                                    .addComponent(lblEmail)
                                    .addComponent(lblPhoneNumber)
                                    .addComponent(lblPositionTitle))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtFldTeamInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(txtFldPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                            .addComponent(txtFldPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFldLevel, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                            .addComponent(txtFldName, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(63, 63, 63)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEmployeeId)
                                            .addComponent(lblStartDate)
                                            .addComponent(lblAge)
                                            .addComponent(lblGender))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtFldAge, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFldEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txtFldStartDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(comboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(txtFldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdateUploadPhoto)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnCancelUpdate))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEdit, deletejButton, viewjButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFldLevel, txtFldPhoneNumber, txtFldTeamInfo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(titlejLabel)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deletejButton)
                        .addComponent(viewjButton)
                        .addComponent(btnEdit))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(titleSearch)
                        .addComponent(comboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchGo)
                    .addComponent(btnClearSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblName)
                                    .addComponent(txtFldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPositionTitle)
                                    .addComponent(txtFldPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFldEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFldAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLevel)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFldLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGender)
                                    .addComponent(comboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTeamInfo)
                                    .addComponent(txtFldTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPhoneNumber)
                                    .addComponent(txtFldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFldStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStartDate)))))
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdateUploadPhoto)
                    .addComponent(lblEmail)
                    .addComponent(txtFldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancelUpdate))
                .addContainerGap(200, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnEdit, deletejButton, viewjButton});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboBoxGender, lblAge, lblEmail, lblEmployeeId, lblGender, lblLevel, lblName, lblPhoneNumber, lblPositionTitle, lblStartDate, lblTeamInfo, txtFldAge, txtFldEmail, txtFldEmployeeId, txtFldLevel, txtFldName, txtFldPhoneNumber, txtFldPositionTitle, txtFldStartDate, txtFldTeamInfo});

    }// </editor-fold>//GEN-END:initComponents

    //View button is used to view the records by selecting the required row.
    private void viewjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewjButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = employeeDirectoryjTable.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a valid field");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) employeeDirectoryjTable.getModel();
        Employee selectedEmp = (Employee) model.getValueAt(selectedrow, 0);

        txtFldEmployeeId.setText(String.valueOf(selectedEmp.getEmployeeId()));
        txtFldName.setText(selectedEmp.getName());
        txtFldAge.setText(String.valueOf(selectedEmp.getAge()));
        comboBoxGender.setSelectedItem(selectedEmp.getGender());
        txtFldStartDate.setText(UtilClass.convertDateToString(selectedEmp.getStartDate()));
        txtFldLevel.setText(selectedEmp.getLevel());
        txtFldTeamInfo.setText(selectedEmp.getTeamInfo());
        txtFldPositionTitle.setText(selectedEmp.getPositionTitle());
        txtFldPhoneNumber.setText(selectedEmp.getContactInfo().getCellPhoneNumber());
        txtFldEmail.setText(selectedEmp.getContactInfo().getEmailAddress());
        if (selectedEmp.getPhoto() != null) {
            ImageIcon ii = new ImageIcon(new ImageIcon(selectedEmp.getPhoto()).getImage().getScaledInstance(width, height, WIDTH));
            //System.out.println(lblPhoto.getWidth() + " - " + lblPhoto.getHeight());
            lblPhoto.setIcon(ii);
        } else {
            lblPhoto.setIcon(null);
        }
        setFieldsEditable(false);
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }//GEN-LAST:event_viewjButtonActionPerformed

    //delete button is used to delete the record from the list
    private void deletejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletejButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = employeeDirectoryjTable.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a valid field");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) employeeDirectoryjTable.getModel();
        Employee toBeDeletedEmp = (Employee) model.getValueAt(selectedrow, 0);
        directory.deleteEmployee(toBeDeletedEmp);
        JOptionPane.showMessageDialog(this, "Deleted Successfully");
        clearViewFields();
        populateTable();
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }//GEN-LAST:event_deletejButtonActionPerformed

    //Update button will be visible only after the Edit button is pressed and saves them to the list
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedrow = employeeDirectoryjTable.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a valid field");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) employeeDirectoryjTable.getModel();
        Employee selectedEmp = (Employee) model.getValueAt(selectedrow, 0);

        if (!UtilClass.isOnlyTextWithWhiteSpaces(txtFldName.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Please enter valid name.");
            return;
        }
        try {
            if (!UtilClass.isOnlyNumber(txtFldAge.getText()) || Integer.parseInt(txtFldAge.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter valid age.");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter valid age.");
            return;
        }

        if (!UtilClass.isOnlyText("" + comboBoxGender.getSelectedItem())) {
            JOptionPane.showMessageDialog(this, "Please enter valid gender.");
            return;
        }

        Date date = UtilClass.convertStringToDate(txtFldStartDate.getText());
        if (date == null) {
            JOptionPane.showMessageDialog(this, "Please enter valid date input.");
            return;
        }

        if (!UtilClass.isPhoneNumberVerified(txtFldPhoneNumber.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter valid 10 digit phone number.");
            return;
        }

        if (!UtilClass.isEmailValidated(txtFldEmail.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter valid email id");
            return;
        }

        String employeeId = txtFldEmployeeId.getText();
        String name = txtFldName.getText().trim();
        int age = Integer.parseInt(txtFldAge.getText());
        String gender = "" + comboBoxGender.getSelectedItem();
        String level = txtFldLevel.getText();
        String teamInfo = txtFldTeamInfo.getText();
        String positionTitle = txtFldPositionTitle.getText();
        String phoneNumber = txtFldPhoneNumber.getText();
        String emailAddress = txtFldEmail.getText();

        selectedEmp.setEmployeeId(employeeId);
        selectedEmp.setName(name);
        selectedEmp.setAge(age);
        selectedEmp.setGender(gender);
        selectedEmp.setStartDate(date);
        selectedEmp.setLevel(level);
        selectedEmp.setTeamInfo(teamInfo);
        selectedEmp.setPositionTitle(positionTitle);
        ContactInfo contactInfo = new ContactInfo(phoneNumber, emailAddress);
        selectedEmp.setContactInfo(contactInfo);
        if (employee_image != null) {
            selectedEmp.setPhoto(employee_image);
            employee_image = null;
        }

        JOptionPane.showMessageDialog(this, "Data updated successfully.");
        populateTable();
        setFieldsEditable(false);
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtFldEmployeeIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldEmployeeIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldEmployeeIdActionPerformed

    private void txtFldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldNameActionPerformed

    private void txtFldTeamInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldTeamInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldTeamInfoActionPerformed

    private void txtFldPositionTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldPositionTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldPositionTitleActionPerformed

    private void txtFldLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldLevelActionPerformed

    private void txtFldEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldEmailActionPerformed

    private void comboBoxGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxGenderActionPerformed

    private void txtFldStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldStartDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldStartDateActionPerformed

    //Search can be done using id, name, gender, level, position title, email
    private void btnSearchGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchGoActionPerformed
        clearViewFields();
        String searchField = comboBoxSearch.getSelectedItem() + "";
        List<Employee> filterList = directory.getEmployeeDirectory();
        searchField = searchField.replaceAll("\\s+", "");
        String searchValue = txtFldSearch.getText().trim();
        if (searchValue == null || (searchValue.length() == 0)
                || searchField == null || (searchField.length() == 0)) {
            JOptionPane.showMessageDialog(this, "Please select valid search field.");
            populateTable();
            return;
        }

        if (searchField.equalsIgnoreCase("EmployeeId")) {
            filterList = filterList.stream()
                    .filter(c -> c.getEmployeeId().equalsIgnoreCase(searchValue))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("Name")) {
            if (!UtilClass.isOnlyTextWithWhiteSpaces(searchValue)) {
                JOptionPane.showMessageDialog(this, "Please enter valid name.");
                populateTable();
                return;
            }
            filterList = filterList.stream()
                    .filter(c -> String.valueOf(c.getName()).toLowerCase().contains(searchValue.toLowerCase()))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("Age")) {
            try {
                if (!UtilClass.isOnlyNumber(searchValue) || Integer.parseInt(searchValue) <= 0) {
                    JOptionPane.showMessageDialog(this, "Please enter valid age.");
                    populateTable();
                    return;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter valid age.");
                populateTable();
                return;
            }
            filterList = filterList.stream()
                    .filter(c -> c.getAge() == Integer.parseInt(searchValue))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("Gender")) {
            if (!UtilClass.isOnlyText(searchValue)) {
                JOptionPane.showMessageDialog(this, "Please enter valid gender.");
                populateTable();
                return;
            }
            filterList = filterList.stream()
                    .filter(c -> String.valueOf(c.getGender()).equalsIgnoreCase(searchValue))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("Level")) {
            filterList = filterList.stream()
                    .filter(c -> c.getLevel().toLowerCase().contains(searchValue))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("PositionTitle")) {
            filterList = filterList.stream()
                    .filter(c -> c.getPositionTitle().toLowerCase().contains(searchValue))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("Email")) {
//            if (!UtilClass.isEmailValidated(searchValue)) {
//                JOptionPane.showMessageDialog(this, "Please enter valid email id");
//                return;
//            }
            filterList = filterList.stream()
                    .filter(c -> String.valueOf(c.getContactInfo().getEmailAddress()).equalsIgnoreCase(searchValue))
                    .collect(Collectors.toList());
        } else if (searchField.equalsIgnoreCase("PhoneNumber")) {
//            if (!UtilClass.isPhoneNumberVerified(searchValue)) {
//                JOptionPane.showMessageDialog(this, "Please enter valid 10 digit phone number.");
//                populateTable();
//                return;
//            }
            filterList = filterList.stream()
                    .filter(c -> c.getContactInfo().getCellPhoneNumber().equalsIgnoreCase(searchValue))
                    .collect(Collectors.toList());
        } else {
            JOptionPane.showMessageDialog(this, "Please select valid search field.");
            populateTable();
            return;
        }
        if (filterList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No results found");
            populateTable();
            return;
        }
        populateDataUsingList(filterList);
        setFieldsEditable(false);
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }//GEN-LAST:event_btnSearchGoActionPerformed

    //This method clears the search results and populates the table with all the records 
    private void btnClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSearchActionPerformed
        // TODO add your handling code here:
        comboBoxSearch.setSelectedIndex(0);
        txtFldSearch.setText("");
        clearViewFields();
        populateTable();
        setFieldsEditable(false);
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }//GEN-LAST:event_btnClearSearchActionPerformed

    //Upon clicking the mouse, the view action is performed
    private void employeeDirectoryjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeDirectoryjTableMouseClicked
        // TODO add your handling code here:
        int selectedrow = employeeDirectoryjTable.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a valid field");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) employeeDirectoryjTable.getModel();
        Employee selectedEmp = (Employee) model.getValueAt(selectedrow, 0);

        txtFldEmployeeId.setText(String.valueOf(selectedEmp.getEmployeeId()));
        txtFldName.setText(selectedEmp.getName());
        txtFldAge.setText(String.valueOf(selectedEmp.getAge()));
        comboBoxGender.setSelectedItem(selectedEmp.getGender());
        txtFldStartDate.setText(UtilClass.convertDateToString(selectedEmp.getStartDate()));
        txtFldLevel.setText(selectedEmp.getLevel());
        txtFldTeamInfo.setText(selectedEmp.getTeamInfo());
        txtFldPositionTitle.setText(selectedEmp.getPositionTitle());
        txtFldPhoneNumber.setText(selectedEmp.getContactInfo().getCellPhoneNumber());
        txtFldEmail.setText(selectedEmp.getContactInfo().getEmailAddress());
        if (selectedEmp.getPhoto() != null) {
            ImageIcon ii = new ImageIcon(new ImageIcon(selectedEmp.getPhoto()).getImage().getScaledInstance(width, height, WIDTH));
            //ImageIcon ii = new ImageIcon(new ImageIcon(selectedEmp.getPhoto()).getImage().getScaledInstance(w, h, WIDTH));
            lblPhoto.setIcon(ii);
        } else {
            lblPhoto.setIcon(null);
        }
        setFieldsEditable(false);
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);
    }//GEN-LAST:event_employeeDirectoryjTableMouseClicked

    //It allows the view fields to be editable and activates the update button.
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        setFieldsEditable(true);
        btnUpdate.setVisible(true);
        btnUpdateUploadPhoto.setVisible(true);
        btnCancelUpdate.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_btnUpdateComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateComponentHidden

    //This button becomes visible after clicking Edit picture and stores photo the record
    private void btnUpdateUploadPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUploadPhotoActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("png", "jpg", "jpeg");
        fileChooser.addChoosableFileFilter(fileNameExtensionFilter);
        int showOpenBox = fileChooser.showOpenDialog(null);
        if (showOpenBox == JFileChooser.APPROVE_OPTION) {
            File selectedImage = fileChooser.getSelectedFile();
            String imagePath = selectedImage.getAbsolutePath();
            fileName = imagePath;
            JOptionPane.showMessageDialog(this, imagePath);
            ImageIcon ii = new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(lblPhoto.getWidth(), lblPhoto.getHeight(), WIDTH));
            lblPhoto.setIcon(ii);
        }

        try {
            File image = new File(fileName);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int num; (num = fis.read(buf)) != -1;) {
                arrayOutputStream.write(buf, 0, num);
            }
            employee_image = arrayOutputStream.toByteArray();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnUpdateUploadPhotoActionPerformed

    //The cancel button, is to abort the update action performed.
    private void btnCancelUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelUpdateActionPerformed
        // TODO add your handling code here:
        comboBoxSearch.setSelectedIndex(0);
        txtFldSearch.setText("");
        clearViewFields();
        populateTable();
        setFieldsEditable(false);
        btnUpdate.setVisible(false);
        btnUpdateUploadPhoto.setVisible(false);
        btnCancelUpdate.setVisible(false);

    }//GEN-LAST:event_btnCancelUpdateActionPerformed

    private void comboBoxSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxSearchActionPerformed

    //It populates the table with all the records
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) employeeDirectoryjTable.getModel();
        model.setRowCount(0);
        directory.getEmployeeDirectory().forEach((employee) -> {
            Object[] row = new Object[8];
            row[0] = employee;
            row[1] = employee.getName();
            row[2] = employee.getGender();
            row[3] = employee.getLevel();
            row[4] = employee.getAge();
            row[5] = employee.getPositionTitle();
            row[6] = employee.getContactInfo().getCellPhoneNumber();
            row[7] = employee.getContactInfo().getEmailAddress();
            model.addRow(row);
        });
    }

    //It populates the table with list that is passed
    private void populateDataUsingList(List<Employee> filterList) {
        DefaultTableModel model = (DefaultTableModel) employeeDirectoryjTable.getModel();
        model.setRowCount(0);
        filterList.forEach((employee) -> {
            Object[] row = new Object[8];
            row[0] = employee;
            row[1] = employee.getName();
            row[2] = employee.getGender();
            row[3] = employee.getLevel();
            row[4] = employee.getAge();
            row[5] = employee.getPositionTitle();
            row[6] = String.valueOf(employee.getContactInfo().getCellPhoneNumber());
            row[7] = employee.getContactInfo().getEmailAddress();
            model.addRow(row);
        });
    }

    //This method clears all the fields
    public void clearViewFields() {
        txtFldEmployeeId.setText("");
        txtFldName.setText("");
        txtFldAge.setText("");
        comboBoxGender.setSelectedIndex(0);
        txtFldStartDate.setText("");
        txtFldLevel.setText("");
        txtFldTeamInfo.setText("");
        txtFldPositionTitle.setText("");
        txtFldPhoneNumber.setText("");
        txtFldEmail.setText("");
        lblPhoto.setIcon(null);
    }

    //This method makes all the fields editable by boolean
    public void setFieldsEditable(boolean b) {
        txtFldEmployeeId.setEditable(b);
        txtFldName.setEditable(b);
        txtFldAge.setEditable(b);
        comboBoxGender.setEnabled(b);
        txtFldStartDate.setEditable(b);
        txtFldLevel.setEditable(b);
        txtFldTeamInfo.setEditable(b);
        txtFldPositionTitle.setEditable(b);
        txtFldPhoneNumber.setEditable(b);
        txtFldEmail.setEditable(b);

//        txtFldEmployeeId.setEnabled(b);
//        txtFldName.setEnabled(b);
//        txtFldAge.setEnabled(b);
//        comboBoxGender.setEnabled(b);
//        txtFldStartDate.setEnabled(b);
//        txtFldLevel.setEnabled(b);
//        txtFldTeamInfo.setEnabled(b);
//        txtFldPositionTitle.setEnabled(b);
//        txtFldPhoneNumber.setEnabled(b);
//        txtFldEmail.setEnabled(b);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelUpdate;
    private javax.swing.JButton btnClearSearch;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearchGo;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateUploadPhoto;
    private javax.swing.JComboBox<String> comboBoxGender;
    private javax.swing.JComboBox<String> comboBoxSearch;
    private javax.swing.JButton deletejButton;
    private javax.swing.JTable employeeDirectoryjTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmployeeId;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblPositionTitle;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblTeamInfo;
    private javax.swing.JLabel titleSearch;
    private javax.swing.JLabel titlejLabel;
    private javax.swing.JTextField txtFldAge;
    private javax.swing.JTextField txtFldEmail;
    private javax.swing.JTextField txtFldEmployeeId;
    private javax.swing.JTextField txtFldLevel;
    private javax.swing.JTextField txtFldName;
    private javax.swing.JTextField txtFldPhoneNumber;
    private javax.swing.JTextField txtFldPositionTitle;
    private javax.swing.JTextField txtFldSearch;
    private javax.swing.JTextField txtFldStartDate;
    private javax.swing.JTextField txtFldTeamInfo;
    private javax.swing.JButton viewjButton;
    // End of variables declaration//GEN-END:variables

}
